---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { client } from '../lib/sanity.js';

const localRecipes = (await getCollection('recipes')).map((entry) => ({
	...entry.data,
	id: entry.id,
	slug: entry.slug,
}));

let sanityRecipes = [];
try {
	sanityRecipes = await client.fetch(`
    *[_type == "recipe"]{
      _id,
      title,
      ingredients,
      instructions,
      "image": image.asset->url,
      "video": video.asset->url,
      "slug": slug.current
    }
  `);
} catch (e) {
	console.error('Failed to fetch Sanity recipes:', e.message);
}

const recipes = [...localRecipes, ...sanityRecipes];
---

<BaseLayout title='Recipes'>
	<div class='header-buttons'>
		<button onclick='history.back()' class='back-button'>Back</button>
		<a href='/add-recipe' class='add-recipe-button'>
			<span class='plus-icon'>+</span> Add New Recipe
		</a>
	</div>

	<h1>Delicious Recipes</h1>

	<div class='recipes-grid'>
		{
			recipes.map((recipe) => (
				<article class='recipe-card'>
					{recipe.image && (
						<img
							src={recipe.image}
							alt={recipe.title}
							loading='lazy'
							width='400'
							height='300'
						/>
					)}

					<div class='recipe-content'>
						<h2>{recipe.title}</h2>

						<div class='recipe-details'>
							<div class='toggle-content'>
								<h3>Ingredients</h3>
								<p class='ingredients-list'>
									{(Array.isArray(recipe.ingredients)
										? recipe.ingredients
										: recipe.ingredients?.split?.('\n') || []
									)
										.filter(Boolean)
										.map((ingredient, i) => (
											<span key={i}>
												{ingredient}
												<br />
											</span>
										))}
								</p>

								<h3>Instructions</h3>
								<p class='instructions-list'>
									{(Array.isArray(recipe.instructions)
										? recipe.instructions
										: recipe.instructions?.split?.('\n') || []
									)
										.filter(Boolean)
										.map((step, i) => (
											<span key={i}>
												{step}
												<br />
											</span>
										))}
								</p>
							</div>

							<div class='mobile-only-toggle'>
								<button class='mobile-toggle-button'>View More</button>
							</div>
						</div>
					</div>
				</article>
			))
		}
	</div>
</BaseLayout>

<style>
	:root {
		--primary-color: #d2691e;
		--secondary-color: #c14e39;
		--light-bg: #fff6f6;
		--border-color: #f5c6c6;
		--text-color: #5a2e2e;
		--scroll-thumb: #f08080;
		--scroll-track: #ffecec;
	}

	/* Header buttons */
	.header-buttons {
		display: flex;
		gap: 15px;
		margin: 15px;
	}

	.back-button,
	.add-recipe-button {
		padding: 10px 15px;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		font-weight: bold;
		text-decoration: none;
		transition:
			transform 0.2s,
			box-shadow 0.2s;
	}

	.back-button {
		background: var(--primary-color);
		color: white;
	}

	.add-recipe-button {
		background: var(--secondary-color);
		color: white;
	}

	.plus-icon {
		color: white;
		font-weight: bold;
		margin-right: 0.3rem;
		font-size: 1.5rem;
	}

	.back-button:hover,
	.add-recipe-button:hover {
		transform: translateY(-2px);
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
	}

	/* Main heading */
	h1 {
		text-align: center;
		margin: 20px 0;
		color: var(--primary-color);
	}

	/* Recipes grid */
	.recipes-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		gap: 30px;
		padding: 20px;
		margin: 0 auto;
		max-width: 1400px;
	}

	.recipe-card {
		background: white;
		border: 1px solid var(--border-color);
		border-radius: 12px;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		display: flex;
		flex-direction: column;
	}

	.recipe-card:hover {
		transform: translateY(-5px);
		box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
	}

	.recipe-card img {
		width: 100%;
		height: 200px;
		object-fit: cover;
	}

	.recipe-content {
		padding: 15px;
		display: flex;
		flex-direction: column;
	}

	/* Toggle content visible by default (desktop) */
	.toggle-content {
		max-height: none;
		overflow: visible;
		transition: max-height 0.3s ease;
	}

	/* Hide toggle button on desktop */
	.mobile-only-toggle {
		display: none;
	}

	.recipe-content h2 {
		margin: 0 0 10px;
		color: var(--primary-color);
		font-size: 1.3rem;
	}

	/* Recipe details */
	.recipe-details {
		margin-top: 10px;
	}

	.recipe-details h3 {
		margin: 10px 0 5px;
		font-size: 1.1rem;
		color: var(--primary-color);
	}

	/* Lists styling */
	.ingredients-list,
	.instructions-list {
		background: var(--light-bg);
		border: 1px solid var(--border-color);
		border-radius: 8px;
		padding: 10px 15px 10px 25px;
		margin: 5px 0;
		max-height: 150px;
		overflow-y: auto;
	}

	.ingredients-list {
		list-style-type: disc;
	}

	.instructions-list {
		list-style-type: decimal;
	}

	.ingredients-list li,
	.instructions-list li {
		padding: 4px 0;
		line-height: 1.4;
	}

	/* Video container */
	.video-container {
		margin-top: 15px;
	}

	/* Scrollbars */
	.ingredients-list::-webkit-scrollbar,
	.instructions-list::-webkit-scrollbar {
		width: 8px;
	}

	.ingredients-list::-webkit-scrollbar-thumb,
	.instructions-list::-webkit-scrollbar-thumb {
		background: var(--scroll-thumb);
		border-radius: 4px;
	}

	.ingredients-list::-webkit-scrollbar-track,
	.instructions-list::-webkit-scrollbar-track {
		background: var(--scroll-track);
		border-radius: 4px;
	}

	/* Mobile styles */
	@media (max-width: 768px) {
		.recipe-card img {
			width: 100%;
			height: 160px;
			object-fit: cover;
		}
		.recipes-grid {
			grid-template-columns: 1fr;
			padding: 10px;
		}

		/* Hide ingredients + instructions initially on mobile */
		.toggle-content {
			max-height: 0;
			overflow: hidden;
		}
		/* When expanded */
		.toggle-content.expanded {
			max-height: 1000px;
			overflow: visible;
		}

		/* Show toggle button on mobile */
		.mobile-only-toggle {
			display: block;
			margin-top: 10px;
			text-align: center;
		}

		.mobile-only-toggle button {
			background-color: var(--primary-color);
			color: white;
			border: none;
			padding: 0.5rem 1rem;
			border-radius: 5px;
			font-weight: bold;
			cursor: pointer;
		}
	}
</style>

<script is:inline>
	document.addEventListener('click', (e) => {
		if (e.target.classList.contains('mobile-toggle-button')) {
			const content = e.target
				.closest('.recipe-details')
				.querySelector('.toggle-content');
			content.classList.toggle('expanded');
			e.target.textContent = content.classList.contains('expanded')
				? 'View Less'
				: 'View More';
		}
	});
</script>
