---
// RecipeFilters.astro
import TextFilter from './filters/TextFilter.jsx';
import IngredientsFilter from './filters/IngredientsFilter.jsx';
import ChefFilter from './filters/ChefFilter.jsx';
import TagsFilter from './filters/TagsFilter.jsx';
import RatingFilter from './filters/RatingFilter.jsx';

const { recipes, onFilter } = Astro.props;

// Internal state
let filterValues = {
	text: '',
	ingredients: [],
	chef: '',
	tags: [],
	rating: null,
};

function handleFilterChange(key, value) {
	filterValues[key] = value;

	const filtered = recipes.filter((r) => {
		// Text filter
		if (
			filterValues.text &&
			!r.title.toLowerCase().includes(filterValues.text.toLowerCase())
		)
			return false;

		// Ingredients filter
		if (filterValues.ingredients.length > 0) {
			const recipeIngredients = Array.isArray(r.ingredients)
				? r.ingredients
				: r.ingredients?.split('\n') || [];
			if (
				!filterValues.ingredients.every((i) =>
					recipeIngredients.some((ri) =>
						ri.toLowerCase().includes(i.toLowerCase())
					)
				)
			)
				return false;
		}

		// Chef filter
		if (
			filterValues.chef &&
			r.chef?.toLowerCase() !== filterValues.chef.toLowerCase()
		)
			return false;

		// Tags filter
		if (
			filterValues.tags.length > 0 &&
			(!r.tags || !filterValues.tags.every((t) => r.tags.includes(t)))
		)
			return false;

		// Rating filter
		if (filterValues.rating && r.rating < filterValues.rating) return false;

		return true;
	});

	onFilter(filtered);
}
---

<div class='recipe-filters-bar'>
	<TextFilter onChange={(val) => handleFilterChange('text', val)} />
	<IngredientsFilter
		onChange={(val) => handleFilterChange('ingredients', val)}
	/>
	<ChefFilter onChange={(val) => handleFilterChange('chef', val)} />
	<TagsFilter onChange={(val) => handleFilterChange('tags', val)} />
	<RatingFilter onChange={(val) => handleFilterChange('rating', val)} />
</div>

<style>
	.recipe-filters-bar {
		display: grid;
		grid-template-columns: 2fr 1fr 1fr 1fr 1fr; /* text search bigger, others smaller */
		gap: 12px;
		padding: 12px 20px;
		background-color: #fff;
		border-radius: 15px;
		box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
		align-items: center;
		max-width: 1200px;
		margin: 20px auto;
	}

	.recipe-filters-bar input,
	.recipe-filters-bar select {
		width: 100%;
		padding: 0.5rem 0.8rem;
		border-radius: 12px;
		border: 1px solid rgba(0, 0, 0, 0.15);
		box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
		font-size: 0.95rem;
		transition: all 0.3s ease;
	}

	.recipe-filters-bar input:focus,
	.recipe-filters-bar select:focus {
		border-color: #ff6347;
		box-shadow: 0 0 8px #ff6347;
		outline: none;
	}

	/* Tags as chips inside input (optional) */
	.chip {
		display: inline-flex;
		align-items: center;
		padding: 0.25rem 0.6rem;
		border-radius: 20px;
		background-color: #ffe6e0;
		color: #c14e39;
		font-size: 0.85rem;
		margin: 2px;
	}

	.chip:hover {
		background-color: #ff6347;
		color: white;
	}

	/* Responsive: shrink nicely */
	@media (max-width: 1024px) {
		.recipe-filters-bar {
			grid-template-columns: 1fr 1fr 1fr 1fr 1fr; /* equal width smaller screens */
		}
	}

	@media (max-width: 768px) {
		.recipe-filters-bar {
			display: flex;
			flex-wrap: wrap;
			gap: 8px;
		}
		.recipe-filters-bar > * {
			flex: 1 1 48%; /* two per row on tablet */
		}
	}

	@media (max-width: 480px) {
		.recipe-filters-bar > * {
			flex: 1 1 100%; /* stack fully on mobile */
		}
	}
</style>
