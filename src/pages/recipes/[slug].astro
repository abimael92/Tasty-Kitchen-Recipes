---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { client } from '../../lib/sanity.js';

import AuthorMeta from '../../components/AuthorMeta.astro';
import RatingStars from '../../components/RatingStars.jsx';
import NutritionInfo from '../../components/NutritionInfo.astro';
import RecipeChecklist from '../../components/RecipeChecklist.astro';
import CommentsSection from '../../components/CommentsSection.astro';
import RecipeTags from '../../components/RecipeTags.astro';

import InteractiveRating from '../../components/InteractiveRating.jsx';
import SimpleRating from '../../components/SimpleRating.jsx';

const { slug } = Astro.params;

let recipe = null;

try {
	// Load local recipes collection
	const local = await getCollection('recipes');
	// Find local recipe by comparing slug.value (Slug object)
	const localRecipe = local.find((r) => r.slug?.value === slug);

	// Fetch Sanity recipe by slug
	const sanityRecipe = await client.fetch(
		`*[_type == "recipe" && slug.current == $slug][0]{
      title,
      ingredients,
      instructions,
      "image": image.asset->url,
      "video": video.asset->url,
      calories,
      tags,
      servings,
      rating
    }`,
		{ slug }
	);

	recipe = localRecipe?.data || sanityRecipe || null;

	if (!recipe) {
		throw new Error('Recipe not found');
	}
} catch (err) {
	console.error('Error loading recipe:', err);
}
---

{
	recipe ? (
		<BaseLayout title={recipe.title}>
			<article class='recipe-view'>
				{recipe.image && (
					<img src={recipe.image} alt={recipe.title} class='hero-img' />
				)}

				<h1>{recipe.title}</h1>

				<div class='meta-row'>
					<AuthorMeta name={recipe.chef} date={recipe.date} />
					<NutritionInfo
						calories={recipe.calories}
						servings={recipe.servings}
					/>
				</div>

				<div class='meta-rating-tags'>
					<RatingStars rating={3.2} size={48} />
					<RecipeTags tags={recipe.tags} />
				</div>

				<section class='section'>
					<h2>Ingredients</h2>
					<p>
						{(Array.isArray(recipe.ingredients)
							? recipe.ingredients
							: recipe.ingredients?.split?.('\n') || []
						)
							.filter(Boolean)
							.map((ingredient, i) => (
								<span key={i}>
									{ingredient}
									<br />
								</span>
							))}
					</p>
				</section>

				<section class='section'>
					<h2>Instructions</h2>
					<p>
						{(Array.isArray(recipe.instructions)
							? recipe.instructions
							: recipe.instructions?.split?.('\n') || []
						)
							.filter(Boolean)
							.map((step, i) => (
								<span key={i}>
									{step}
									<br />
								</span>
							))}
					</p>
				</section>

				<SimpleRating client:load />

				{recipe.video && (
					<section class='video-wrapper'>
						<h2>Video</h2>
						<video controls src={recipe.video} />
					</section>
				)}
			</article>
		</BaseLayout>
	) : (
		<BaseLayout title='Recipe Not Found'>
			<p>Sorry, this recipe does not exist.</p>
		</BaseLayout>
	)
}
<style>
	.recipe-view {
		max-width: 800px;
		margin: 3rem auto;
		padding: var(--spacing-large);
		color: var(--color-dark);
		border-radius: var(--border-radius);
		display: flex;
		flex-direction: column;
		gap: 3rem;
		font-family: var(--font-body);
	}

	.hero-img {
		width: 100%;
		border-radius: 1rem;
		max-height: 420px;
		object-fit: cover;
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
	}

	h1 {
		font-family: var(--font-heading);
		font-size: 2.75rem;
		font-weight: 700;
		color: var(--color-primary);
		margin-bottom: 0.75rem;
		text-align: center;
	}

	.meta-row {
		display: flex;
		align-items: center;
		justify-content: space-between;
		gap: var(--spacing-medium);
		margin-bottom: 1rem;
		background-color: var(--color-light);
		padding: var(--spacing-medium);
		border-radius: var(--border-radius);
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.07);
		font-size: 0.95rem;
		color: var(--color-header);
	}

	.meta-rating-tags {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: var(--spacing-small);
		margin-bottom: var(--spacing-large);
		padding: var(--spacing-medium);
		background-color: #f3e6e3; /* soft warm tone */
		border-radius: var(--border-radius);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
	}

	.meta-rating-tags .rating-label {
		font-weight: 600;
		color: var(--color-header);
		letter-spacing: 0.05em;
	}

	.meta-rating-tags .rating-value {
		font-weight: 700;
		font-size: 1.3rem;
		color: var(--color-secondary);
	}

	.meta-rating-tags .tags {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: 0.5rem;
		margin-top: var(--spacing-small);
	}

	.meta-rating-tags .tag {
		background-color: var(--color-secondary);
		color: var(--color-light);
		border-radius: 20px;
		padding: 0.4rem 1rem;
		font-size: 0.95rem;
		transition: background-color 0.3s ease;
		cursor: default;
	}

	.meta-rating-tags .tag:hover {
		background-color: var(--color-primary);
	}

	.section {
		margin-top: var(--spacing-large);
		padding: var(--spacing-medium);
		background-color: var(--color-light);
		border-radius: var(--border-radius);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
	}

	h2 {
		font-family: var(--font-heading);
		font-size: 1.6rem;
		margin-bottom: 1rem;
		color: var(--color-primary);
	}

	.section p {
		line-height: 1.6;
		font-size: 1rem;
		color: var(--color-dark);
	}

	.video-wrapper {
		margin-top: var(--spacing-large);
		padding: var(--spacing-medium);
		background-color: var(--color-light);
		border-radius: var(--border-radius);
		box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
	}

	video {
		width: 100%;
		border-radius: var(--border-radius);
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.12);
	}
</style>
