---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { client } from '../../lib/sanity.js';

import AuthorMeta from '../../components/AuthorMeta.astro';
import RecipeRatingDisplay from '../../components/RecipeRatingDisplay';
import NutritionInfo from '../../components/NutritionInfo.astro';
import RecipeChecklist from '../../components/RecipeChecklist.astro';
import CommentsSection from '../../components/CommentsSection.astro';
import RecipeTags from '../../components/RecipeTags.astro';
import AuthFavoriteWrapper from '../../components/AuthFavoriteWrapper';

import AuthRatingWrapper from '../../components/AuthRatingWrapper.jsx';

import { SimpleRating } from '../../components/SimpleRating.jsx';
import AuthGroceryWrapper from '../../components/AuthGroceryWrapper';

const { slug } = Astro.params;

let recipe = null;

try {
	// Load local recipes collection
	const local = await getCollection('recipes');
	// Find local recipe by comparing slug.value (Slug object)
	const localRecipe = local.find((r) => r.slug?.value === slug);

	// Fetch Sanity recipe by slug
	const sanityRecipe = await client.fetch(
		`*[_type == "recipe" && slug.current == $slug][0]{
      _id,
      title,
      ingredients,
      instructions,
      "image": image.asset->url,
      "video": video.asset->url,
      calories,
      tags,
      servings,
      rating,
      chef,
      date
    }`,
		{ slug }
	);

	recipe = localRecipe?.data || sanityRecipe || null;

	if (!recipe) {
		throw new Error('Recipe not found');
	}
} catch (err) {
	console.error('Error loading recipe:', err);
}
---

{
	recipe ? (
		<BaseLayout title={recipe.title}>
			<div class='header-buttons'>
				<button onclick='history.back()' class='back-button'>
					Back
				</button>
				<button onclick='window.print()' class='add-recipe-button'>
					<span class='print-icon'>
						<svg
							xmlns='http://www.w3.org/2000/svg'
							width='20'
							height='20'
							fill='currentColor'
							viewBox='0 0 24 24'
						>
							<path d='M19 8H5V3h14v5zm0 2c1.1 0 2 .9 2 2v6h-4v3H7v-3H3v-6c0-1.1.9-2 2-2h14zm-4 7v3h-6v-3h6z' />
						</svg>
					</span>
					Print Recipe
				</button>
			</div>

			<article class='recipe-view'>
				<AuthFavoriteWrapper recipeId={recipe._id} client:load />

				{recipe.image && (
					<img src={recipe.image} alt={recipe.title} class='hero-img' />
				)}
				<h1>{recipe.title}</h1>

				<div class='social-share'>
					<a
						href={`https://wa.me/?text=${encodeURIComponent(
							recipe.title + ' ' + Astro.url
						)}`}
						target='_blank'
						class='app-icon whatsapp'
					>
						<span class='icon'>
							<svg
								xmlns='http://www.w3.org/2000/svg'
								viewBox='0 0 32 32'
								width='24'
								height='24'
								fill='currentColor'
							>
								<path d='M16.013 2.986c-7.352 0-13.314 5.963-13.314 13.314 0 2.354.611 4.635 1.777 6.656l-1.914 5.568 5.789-1.883c1.978 1.08 4.215 1.65 6.662 1.65 7.35 0 13.312-5.963 13.312-13.314 0-7.352-5.963-13.315-13.313-13.315zm0 24.395c-2.131 0-4.216-.574-6.041-1.662l-.433-.26-3.434 1.118 1.14-3.326-.281-.472c-1.127-1.893-1.723-4.059-1.723-6.26 0-6.671 5.428-12.1 12.1-12.1 6.67 0 12.1 5.429 12.1 12.1 0 6.67-5.429 12.099-12.1 12.099zm6.568-8.893c-.362-.181-2.146-1.06-2.479-1.179-.333-.12-.576-.18-.819.182s-.939 1.179-1.151 1.424c-.211.242-.39.271-.752.09-.362-.181-1.528-.563-2.911-1.794-1.075-.96-1.799-2.144-2.01-2.506-.211-.362-.023-.558.158-.738.163-.162.362-.422.543-.633.181-.211.242-.362.363-.604.12-.241.06-.454-.03-.635-.09-.18-.818-1.969-1.121-2.692-.294-.708-.594-.612-.819-.623-.212-.009-.453-.011-.694-.011s-.635.09-.968.453c-.333.362-1.271 1.242-1.271 3.023 0 1.781 1.303 3.505 1.485 3.747.181.241 2.566 3.922 6.225 5.498.869.375 1.547.599 2.076.768.872.278 1.666.239 2.292.145.698-.104 2.146-.875 2.448-1.719.301-.845.301-1.57.211-1.719-.091-.15-.33-.241-.694-.422z' />
							</svg>
						</span>
						<span class='label'>WhatsApp</span>
					</a>

					<a
						href={`https://pinterest.com/pin/create/button/?url=${encodeURIComponent(
							Astro.url
						)}`}
						target='_blank'
						class='app-icon pinterest'
					>
						<span class='icon'>
							<svg
								xmlns='http://www.w3.org/2000/svg'
								viewBox='0 0 24 24'
								width='24'
								height='24'
								fill='currentColor'
							>
								<path d='M12 0C5.37 0 0 5.37 0 12c0 4.75 3.06 8.79 7.36 10.31-.1-.88-.18-2.23.04-3.2.2-.86 1.29-5.47 1.29-5.47s-.33-.65-.33-1.62c0-1.52.88-2.65 1.98-2.65.94 0 1.39.71 1.39 1.56 0 .95-.6 2.38-.9 3.71-.26 1.1.56 2 1.65 2 1.98 0 3.49-2.09 3.49-5.1 0-2.67-1.92-4.53-4.66-4.53-3.18 0-5.05 2.38-5.05 4.84 0 .95.36 1.98.81 2.54.09.11.1.21.07.33-.08.36-.25 1.12-.29 1.28-.05.21-.17.25-.4.15-1.5-.7-2.44-2.89-2.44-4.66 0-3.78 2.75-7.27 7.94-7.27 4.17 0 7.4 2.98 7.4 6.96 0 4.14-2.61 7.47-6.24 7.47-1.22 0-2.37-.63-2.76-1.38l-.75 2.85c-.27 1.03-1.01 2.32-1.5 3.1 1.13.35 2.32.55 3.57.55 6.63 0 12-5.37 12-12S18.63 0 12 0z' />
							</svg>
						</span>
						<span class='label'>Pinterest</span>
					</a>

					<a
						href={`https://twitter.com/share?url=${encodeURIComponent(
							Astro.url
						)}&text=${encodeURIComponent(recipe.title)}`}
						target='_blank'
						class='app-icon twitter'
					>
						<span class='icon'>
							<svg
								xmlns='http://www.w3.org/2000/svg'
								viewBox='0 0 24 24'
								width='24'
								height='24'
								fill='currentColor'
							>
								<path d='M4 4h3.5l5 7 5-7H21l-7 9.5L21 20h-3.5l-5-7-5 7H3l7-9.5L4 4Z' />
							</svg>
						</span>
						<span class='label'>Twitter</span>
					</a>
				</div>

				<div class='meta-row'>
					<AuthorMeta name={recipe.chef} date={recipe.date} />
					<NutritionInfo
						calories={recipe.calories}
						servings={recipe.servings}
					/>
				</div>

				<div class='meta-rating-tags'>
					<RecipeRatingDisplay recipeId={recipe._id} client:load />
					<RecipeTags tags={recipe.tags} />
				</div>

				<section class='section'>
					<h2>Ingredients</h2>
					<p class='ingredients-list'>
						{(() => {
							let makeNextBold = false;
							return (
								Array.isArray(recipe.ingredients)
									? recipe.ingredients
									: recipe.ingredients?.split('\n') || []
							).map((line, i) => {
								const trimmed = line.trim();
								if (trimmed === '') {
									makeNextBold = true;
									return <br key={i} />;
								}
								// Fix bug: split('.'[1]) is wrong, replace with line.split('.')[1] or whole line
								const content = makeNextBold ? (
									<strong>{line.split('.')[1] ?? line}</strong>
								) : (
									line
								);
								makeNextBold = false;
								return (
									<span key={i}>
										{content}
										<br />
									</span>
								);
							});
						})()}
					</p>

					<AuthGroceryWrapper
						ingredients={recipe.ingredients}
						recipeId={recipe._id}
						client:load
					/>
				</section>

				<section class='section'>
					<h2>Instructions</h2>
					<p class='instructions-list'>
						{(() => {
							let numberingEnabled = true;

							return (
								Array.isArray(recipe.instructions)
									? recipe.instructions
									: recipe.instructions?.split('\n') || []
							).map((line, i) => {
								const trimmed = line.trim();

								if (/^\d+\.$/.test(trimmed)) {
									numberingEnabled = false;
									return <br key={i} />;
								}

								let content = line;
								if (numberingEnabled) {
									content = `${line}`;
								}

								if (trimmed !== '') {
									numberingEnabled = true;
								}

								return (
									<span key={i}>
										{content}
										<br />
									</span>
								);
							});
						})()}
					</p>
				</section>

				<AuthRatingWrapper recipeId={recipe._id} client:load />
			</article>
		</BaseLayout>
	) : (
		<BaseLayout title='Recipe Not Found'>
			<p>Sorry, this recipe does not exist.</p>
		</BaseLayout>
	)
}

<style>
	:root {
		--primary-color: #d2691e;
		--secondary-color: #c14e39;
		--light-bg: #fff6f6;
		--border-color: #f5c6c6;
		--text-color: #5a2e2e;
		--scroll-thumb: #f08080;
		--scroll-track: #ffecec;
	}
	.recipe-view {
		width: 100%;
		margin: 0.5rem auto;
		padding: var(--spacing-large);
		color: var(--color-dark);
		border-radius: var(--border-radius);
		display: flex;
		flex-direction: column;
		gap: 1rem;
		font-family: var(--font-body);
		background-color: #fff;
		box-shadow: 0 6px 24px rgba(0, 0, 0, 0.05);
	}

	.hero-img {
		width: 100%;
		border-radius: 1rem;
		max-height: 420px;
		object-fit: cover;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
	}

	h1 {
		font-family: var(--font-heading);
		font-size: clamp(2.2rem, 5vw, 2.75rem);
		font-weight: 700;
		color: var(--color-primary);
		margin-bottom: 0.75rem;
		text-align: center;
		border-bottom: 2px solid #f3d3c4;
		padding-bottom: 0.5rem;
	}

	.meta-row {
		display: flex;
		align-items: center;
		justify-content: space-between;
		gap: var(--spacing-medium);
		margin-bottom: 1rem;
		background-color: #f4e4df;
		padding: var(--spacing-medium);
		border-radius: var(--border-radius);
		box-shadow: 0 1px 6px rgba(0, 0, 0, 0.06);
		font-size: 0.95rem;
		color: var(--color-header);
	}

	.meta-rating-tags {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: var(--spacing-small);
		margin-bottom: var(--spacing-large);
		padding: var(--spacing-medium);
		background-color: #fef0eb;
		border-radius: var(--border-radius);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
	}

	.meta-rating-tags .rating-label {
		font-weight: 600;
		color: var(--color-header);
		letter-spacing: 0.05em;
	}

	.meta-rating-tags .rating-value {
		font-weight: 700;
		font-size: 1.3rem;
		color: var(--color-secondary);
	}

	.meta-rating-tags .tags {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: 0.5rem;
		margin-top: var(--spacing-small);
	}

	.meta-rating-tags .tag {
		background-color: var(--color-secondary);
		color: var(--color-light);
		border-radius: 9999px;
		padding: 0.4rem 1rem;
		font-size: 0.9rem;
		cursor: pointer;
		transition: background-color 0.3s ease;
	}

	.meta-rating-tags .tag:hover {
		background-color: var(--color-primary);
	}

	.section {
		margin-top: var(--spacing-large);
		padding: var(--spacing-medium);
		background-color: #fff7f4;
		border-radius: var(--border-radius);
		box-shadow: 0 1px 8px rgba(0, 0, 0, 0.04);
		transition: background-color 0.2s ease;
	}

	h2 {
		font-family: var(--font-heading);
		font-size: 1.6rem;
		margin-bottom: 1rem;
		color: var(--color-primary);
		border-bottom: 1px solid #f3d3c4;
		padding-bottom: 0.3rem;
	}

	.section p {
		line-height: 1.65;
		font-size: 1rem;
		color: var(--color-dark);
	}

	.section span:hover {
		background-color: #fff0ea;
		border-radius: 4px;
		transition: background 0.2s ease;
	}

	.container {
		display: flex;
		flex-direction: column;
		align-items: center;
	}
	.rating {
		display: flex;
		gap: 2rem;
		font-weight: 800;
		font-size: 0.9rem;
		font-size: 1.5rem;

		color: #2c3e50;
		background: linear-gradient(135deg, #fe9f8e 0%, #f8f9fa 100%);
		padding: 0px 12px;
		margin: 3rem auto;
		/* border: 5px solid var(--color-accent); */
		border-radius: 20px;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		user-select: none;
		transition:
			background 0.3s ease,
			box-shadow 0.3s ease;
	}
	.heading {
		color: #333;
		font-weight: 800;
		text-align: center;
		font-size: 1.8rem;
	}
	.ratingButton {
		background: none;
		border: none;
		cursor: pointer;
		padding: 0;
		outline: none;
	}

	.rating:hover {
		background: linear-gradient(135deg, #f8f9fa 0%, #fe9f8e 100%);
		/* box-shadow: 0 6px 16px rgba(0, 0, 0, 0.8); */
		cursor: default;
	}
	.video-wrapper {
		margin-top: var(--spacing-large);
		padding: var(--spacing-medium);
		background-color: #fff7f3;
		border-radius: var(--border-radius);
		box-shadow: 0 2px 12px rgba(0, 0, 0, 0.07);
	}

	/* Header buttons */
	.header-buttons {
		display: flex;
		gap: 15px;
		margin: 15px;
	}
	.back-button,
	.add-recipe-button {
		padding: 10px 15px;
		border: none;
		border-radius: 5px;
		cursor: pointer;
		font-weight: bold;
		text-decoration: none;
		transition:
			transform 0.2s,
			box-shadow 0.2s;
	}

	.back-button {
		background: var(--primary-color);
		color: white;
	}

	.add-recipe-button {
		background: var(--secondary-color);
		color: white;
	}

	.print-icon {
		color: white;
		font-weight: bold;
		margin-right: 0.3rem;
		font-size: 1.5rem;
	}
	.back-button:hover,
	.add-recipe-button:hover {
		transform: translateY(-2px);
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
	}

	.social-share {
		display: flex;
		align-items: center;
		gap: 12px;
		margin: 0.5rem 0;
	}

	.app-icon {
		display: flex;
		align-items: center;
		gap: 8px;
		padding: 10px 15px;
		border-radius: 8px;
		font-weight: bold;
		text-decoration: none;
		color: white;
	}

	.app-icon svg {
		width: 20px;
		height: 20px;
		fill: white;
	}

	.app-icon.whatsapp {
		background-color: #25d366;
	}

	.app-icon.pinterest {
		background-color: #e60023;
	}

	.app-icon.twitter {
		background-color: #000000; /* black for X */
	}

	.app-icon:hover {
		opacity: 0.8;
	}

	.share-label {
		margin-left: auto;
		font-weight: bold;
		color: #555;
		font-size: 0.9rem;
	}

	video {
		width: 100%;
		border-radius: var(--border-radius);
		box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
	}

	@media print {
		/* Hide all elements by default */
		body * {
			visibility: hidden;
		}

		/* Show only the recipe content */
		.recipe-view,
		.recipe-view * {
			visibility: visible;
		}

		/* Position the recipe content properly */
		.recipe-view {
			position: absolute;
			left: 0;
			top: 0;
			width: 100%;
			margin: 0;
			padding: 20px;
			box-shadow: none;
			background: white !important;
		}

		/* Hide interactive elements */
		.header-buttons,
		.rating,
		.comments-section,
		button {
			display: none !important;
		}

		/* Adjust images for print */
		.hero-img {
			max-width: 90% !important;
			height: auto !important;
			max-height: 300px !important;
			page-break-inside: avoid;
		}

		/* Improve text readability */
		h1,
		h2,
		p,
		span {
			color: black !important;
			font-family: 'Times New Roman', serif !important;
		}

		/* Remove background colors and shadows */
		.meta-row,
		.meta-rating-tags,
		.section {
			background: white !important;
			box-shadow: none !important;
			border: none !important;
			padding: 0 !important;
			margin: 1rem 0 !important;
		}

		/* Ensure proper page breaks */
		.section {
			page-break-inside: avoid;
		}

		/* Author and nutrition info */
		.meta-row {
			display: flex !important;
			justify-content: space-between !important;
		}

		/* Remove rating stars */
		.rating-wrapper {
			display: none !important;
		}
	}

	@media print {
		.meta-rating-tags .tags {
			display: none !important;
		}
		/* Tags styling - plain text version */
		.meta-rating-tags {
			display: flex !important;
			flex-direction: column !important;
			align-items: center !important;
			gap: 0.5rem !important;
			background: none !important;
			box-shadow: none !important;
			padding: 0 !important;
		}

		.meta-rating-tags .tags {
			display: flex !important;
			flex-wrap: wrap !important;
			justify-content: center !important;
			gap: 0.5rem !important;
		}

		.meta-rating-tags .tag {
			all: initial !important;
			display: inline !important;
			color: black !important;
			font-size: 12pt !important;
			font-family: inherit !important;
			padding: 0 !important;
			margin: 0 !important;
		}

		.meta-rating-tags .tag:not(:last-child)::after {
			content: ', ';
		}
	}
</style>
